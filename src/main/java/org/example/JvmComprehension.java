package org.example;


public class JvmComprehension {

    public static void main(String[] args) {
        int i = 1;                      // 1
        Object o = new Object();        // 2
        Integer ii = 2;                 // 3
        printAll(o, i, ii);             // 4
        System.out.println("finished"); // 7
    }

    private static void printAll(Object o, int i, Integer ii) {
        Integer uselessVar = 700;                   // 5
        System.out.println(o.toString() + i + ii);  // 6
    }
}



/*
* ------------------------------Понимание JVM------------------------------
* 1)  Когда метод main вызывается, JVM создает новый фрейм в стеке для этого метода.
* 2)  В строке 1 (int i = 1;) в стеке, внутри фрейма метода main, создается примитивная переменная i со значением 1.
* 3)  В строке 2 (Object o = new Object();) объект Object создается в куче,
* а ссылка на этот объект хранится в переменной o во фрейме стека метода main.
* 4)  В строке 3 (Integer ii = 2;) создается объект Integer с значением 2 в куче,
* а ссылка на него хранится в переменной ii во фрейме стека метода main.
* 5)  В строке 4 (printAll(o, i, ii);) вызывается метод printAll, для которого создается новый фрейм в стеке.
* Переменные o, i и ii передаются в качестве аргументов, и для каждого аргумента создается ссылка или копия значения
* в фрейме метода printAll.
* 6)  В строке 5 (Integer uselessVar = 700;) во фрейме метода printAll создается новый объект Integer
* со значением 700 в куче, и ссылка на него хранится в переменной uselessVar.
* 7)  В строке 6 (System.out.println(o.toString() + i + ii);) вызывается метод toString объекта o,
* значение i преобразуется в строку и конкатенируется с результатом toString и значением ii,
* после чего результат выводится в консоль. Все эти операции происходят внутри фрейма метода printAll.
* 8)  После завершения метода printAll его фрейм удаляется из стека, а созданные в нем объекты становятся кандидатами
* на сборку мусора, если на них больше нет ссылок.
* 9)  В строке 7 (System.out.println("finished");) во фрейме метода main выводится строка "finished".
* 10) ClassLoader'ы занимаются загрузкой классов в момент их первого использования.
*
* ** В данном случае ClassLoader загрузит класс JvmComprehension и связанные классы (например, Object, Integer, System)
* в метаспейс при их первом использовании.

* ** Сборщик мусора периодически активируется для очистки кучи от объектов, до которых нельзя добраться
* через активные ссылки в стеке, например, после завершения работы методов и удаления их фреймов из стека.
*/